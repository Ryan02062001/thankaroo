// src/app/reminders/components/ReminderSettingsDialog.tsx
"use client";

import * as React from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useReminders, type Channel, type ReminderSettings } from "@/app/contexts/ReminderContext";
import { Plus, Minus } from "lucide-react";

type GiftLike = {
  id: string;
  guestName: string;
  description: string;
  date: string;
};

export function ReminderSettingsDialog({
  isOpen,
  setIsOpen,
  listId,
  gift,
}: {
  isOpen: boolean;
  setIsOpen: (v: boolean) => void;
  listId: string;
  gift?: GiftLike;
}) {
  const { getListSettings, setListSettings, scheduleForGift } = useReminders();
  const base = getListSettings(listId);

  const [intervals, setIntervals] = React.useState<number[]>(base.defaultIntervalsDays);
  const [channel, setChannel] = React.useState<Channel>(base.defaultChannel);
  const [autoDraft, setAutoDraft] = React.useState<boolean>(base.autoGenerateDrafts);
  const [customDays, setCustomDays] = React.useState<string>("");

  React.useEffect(() => {
    if (isOpen) {
      const s = getListSettings(listId);
      setIntervals(s.defaultIntervalsDays);
      setChannel(s.defaultChannel);
      setAutoDraft(s.autoGenerateDrafts);
      setCustomDays("");
    }
  }, [isOpen, listId, getListSettings]);

  const addCustomDays = () => {
    const n = Number(customDays);
    if (Number.isFinite(n) && n > 0 && !intervals.includes(n)) {
      setIntervals([...intervals, n].sort((a, b) => a - b));
      setCustomDays("");
    }
  };

  const removeInterval = (val: number) =>
    setIntervals(intervals.filter((d) => d !== val));

  const save = () => {
    if (gift) {
      scheduleForGift(listId, gift, {
        intervalsDays: intervals,
        channel,
        autoGenerateDrafts: autoDraft,
      });
    } else {
      const next: ReminderSettings = {
        defaultIntervalsDays: intervals,
        defaultChannel: channel,
        autoGenerateDrafts: autoDraft,
        timezone: base.timezone,
      };
      setListSettings(listId, next);
    }
    setIsOpen(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="text-[#2d2d2d]">
            {gift ? `Reminders for ${gift.guestName}` : "List Reminder Defaults"}
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          <div>
            <div className="mb-2 text-sm font-medium text-[#2d2d2d]">Intervals (days)</div>
            <div className="flex flex-wrap gap-2">
              {intervals.map((d) => (
                <span key={d} className="inline-flex items-center gap-1 rounded-md border px-2 py-1 text-sm text-[#2d2d2d]">
                  {d}d
                  <button className="text-[#A8E6CF]" onClick={() => removeInterval(d)} aria-label="remove interval">
                    <Minus className="h-3 w-3" />
                  </button>
                </span>
              ))}
              <div className="flex items-center gap-2">
                <Input
                  value={customDays}
                  onChange={(e) => setCustomDays(e.target.value)}
                  placeholder="Custom"
                  className="w-24"
                  inputMode="numeric"
                />
                <Button size="sm" onClick={addCustomDays} className="bg-[#A8E6CF] text-[#2d2d2d] hover:bg-[#98CFBA]">
                  <Plus className="h-4 w-4" /> Add
                </Button>
              </div>
            </div>
          </div>

          <div>
            <div className="mb-2 text-sm font-medium text-[#2d2d2d]">Channel</div>
            <Select value={channel} onValueChange={(v) => setChannel(v as Channel)}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Select..." />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="email">Email</SelectItem>
                <SelectItem value="text">Text</SelectItem>
                <SelectItem value="card">Card</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <label className="flex items-center gap-2 text-sm text-[#2d2d2d]">
            <input
              type="checkbox"
              checked={autoDraft}
              onChange={(e) => setAutoDraft(e.target.checked)}
            />
            Auto-generate draft with these reminders
          </label>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => setIsOpen(false)}>Cancel</Button>
          <Button className="bg-[#A8E6CF] text-[#2d2d2d] hover:bg-[#98CFBA]" onClick={save}>
            Save
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}