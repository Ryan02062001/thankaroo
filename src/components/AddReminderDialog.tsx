"use client";

import * as React from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useReminders, type Channel } from "@/app/contexts/ReminderContext";
import { supabase } from "@/utils/supabase/client";
import { Calendar, Search, Plus, X } from "lucide-react";
import { channelBadgeClasses } from "@/lib/theme";
import type { Database } from "@/app/types/database";

type Gift = {
  id: string;
  guestName: string;
  description: string;
  date: string; // YYYY-MM-DD
};

type DBGiftRow = Pick<
  Database["public"]["Tables"]["gifts"]["Row"],
  "id" | "guest_name" | "description" | "date_received"
>;

function ymd(d: Date) {
  return d.toISOString().slice(0, 10);
}

function addDaysYmd(dateYmd: string, days: number) {
  const d = new Date(dateYmd + "T00:00:00Z");
  d.setUTCDate(d.getUTCDate() + days);
  return ymd(d);
}

function nextNDays(startYmd: string, n: number) {
  const arr: string[] = [];
  const start = new Date(startYmd + "T00:00:00Z");
  for (let i = 0; i < n; i++) {
    const d = new Date(start);
    d.setUTCDate(start.getUTCDate() + i);
    arr.push(ymd(d));
  }
  return arr;
}

export function AddReminderDialog({
  isOpen,
  setIsOpen,
  listId,
  initialGiftId,
}: {
  isOpen: boolean;
  setIsOpen: (v: boolean) => void;
  listId: string;
  initialGiftId?: string;
}) {
  const { getListSettings, createReminders } = useReminders();
  const defaults = getListSettings(listId);

  const [loading, setLoading] = React.useState(false);
  const [gifts, setGifts] = React.useState<Gift[]>([]);
  const [giftQuery, setGiftQuery] = React.useState("");
  const [selectedGiftIds, setSelectedGiftIds] = React.useState<Set<string>>(new Set());
  const [selectedDates, setSelectedDates] = React.useState<Set<string>>(new Set());
  const [channel, setChannel] = React.useState<Channel>(defaults.defaultChannel);
  const [autoDraft, setAutoDraft] = React.useState<boolean>(defaults.autoGenerateDrafts);
  const [error, setError] = React.useState<string | null>(null);

  React.useEffect(() => {
    if (!isOpen) return;
    setError(null);
    setChannel(defaults.defaultChannel);
    setAutoDraft(defaults.autoGenerateDrafts);
  }, [isOpen, defaults]);

  React.useEffect(() => {
    if (!isOpen) return;
    setLoading(true);
    void (async () => {
      const { data, error } = await supabase
        .from("gifts")
        .select("id, guest_name, description, date_received")
        .eq("list_id", listId)
        .order("date_received", { ascending: false });
      setLoading(false);
      if (error) return;
      const rows = (data ?? []) as DBGiftRow[];
      const mapped: Gift[] = rows.map((g) => ({
        id: g.id,
        guestName: g.guest_name,
        description: g.description,
        date: g.date_received ?? new Date().toISOString().slice(0, 10),
      }));
      setGifts(mapped);
      if (initialGiftId) setSelectedGiftIds(new Set([initialGiftId]));
    })();
  }, [isOpen, listId, initialGiftId]);

  const filteredGifts = gifts.filter((g) =>
    `${g.guestName} ${g.description}`.toLowerCase().includes(giftQuery.toLowerCase())
  );

  const today = ymd(new Date());
  const calendarDays = nextNDays(today, 42);

  const toggleGift = (id: string) => {
    setSelectedGiftIds((prev) => {
      const next = new Set(prev);
      if (next.has(id)) next.delete(id); else next.add(id);
      return next;
    });
  };

  const toggleDate = (d: string) => {
    setSelectedDates((prev) => {
      const next = new Set(prev);
      if (next.has(d)) next.delete(d); else next.add(d);
      return next;
    });
  };

  const quickAddDates = (offsets: number[]) => {
    const base = today;
    setSelectedDates((prev) => {
      const next = new Set(prev);
      for (const off of offsets) {
        next.add(addDaysYmd(base, off));
      }
      return next;
    });
  };

  const clearSelections = () => {
    setSelectedDates(new Set());
    if (!initialGiftId) setSelectedGiftIds(new Set());
  };

  const save = async () => {
    setError(null);
    const ids = Array.from(selectedGiftIds);
    const dates = Array.from(selectedDates).sort();
    if (ids.length === 0) {
      setError("Select at least one gift");
      return;
    }
    if (dates.length === 0) {
      setError("Add at least one date");
      return;
    }
    const chosen = gifts.filter((g) => ids.includes(g.id));
    for (const gift of chosen) {
      await createReminders(listId, gift, dates, { channel, autoGenerateDrafts: autoDraft });
    }
    setIsOpen(false);
    clearSelections();
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent className="sm:max-w-3xl w-[min(95vw,56rem)] max-h-[85vh] overflow-y-auto overflow-x-hidden">
        <DialogHeader>
          <DialogTitle className="text-[#2d2d2d]">Add Reminders</DialogTitle>
        </DialogHeader>

        <div className="grid gap-4 md:grid-cols-[1.2fr_1fr]">
          {/* Gift picker */}
          <div className="rounded-lg border p-3 bg-white">
            <div className="mb-2 flex items-center gap-2">
              <Search className="h-4 w-4 text-gray-500" />
              <Input
                placeholder="Search gifts by name or description"
                value={giftQuery}
                onChange={(e) => setGiftQuery(e.target.value)}
                className="flex-1"
              />
            </div>
            <div className="mb-2 flex items-center gap-2">
              <Button size="sm" variant="outline" className="hover:border-[#A8E6CF] hover:bg-[#A8E6CF]/20" onClick={() => setSelectedGiftIds(new Set(filteredGifts.map((g) => g.id)))}>Select all</Button>
              <Button size="sm" variant="outline" className="hover:border-[#A8E6CF] hover:bg-[#A8E6CF]/20" onClick={() => setSelectedGiftIds(new Set())}>Clear</Button>
            </div>
            <div className="max-h-[280px] overflow-y-auto rounded border">
              {loading ? (
                <div className="p-3 text-sm text-[#2d2d2d]">Loading gifts…</div>
              ) : filteredGifts.length === 0 ? (
                <div className="p-3 text-sm text-[#2d2d2d]">No gifts found.</div>
              ) : (
                filteredGifts.map((g) => {
                  const selected = selectedGiftIds.has(g.id);
                  return (
                    <label key={g.id} className={`flex items-center justify-between gap-2 border-b p-3 last:border-0 transition-colors hover:bg-gray-50 ${selected ? "bg-[#A8E6CF]/20" : ""}`}>
                      <div className="min-w-0">
                        <div className="flex items-center gap-2">
                          <span className="font-medium text-[#2d2d2d]">{g.guestName}</span>
                          <Badge variant="outline" className={`border ${channelBadgeClasses[channel]}`}>{new Date(g.date + "T00:00:00Z").toLocaleDateString("en-US")}</Badge>
                        </div>
                        <div className="text-xs text-[#2d2d2d] truncate">{g.description}</div>
                      </div>
                      <input type="checkbox" checked={selected} onChange={() => toggleGift(g.id)} />
                    </label>
                  );
                })
              )}
            </div>
          </div>

          {/* Date & channel */}
          <div className="space-y-3">
            <div className="rounded-lg border bg-white p-3">
              <div className="mb-2 text-sm font-medium text-[#2d2d2d]">Quick dates</div>
              <div className="flex flex-wrap gap-2">
                <Button size="sm" variant="outline" className="hover:border-[#A8E6CF] hover:bg-[#A8E6CF]/20" onClick={() => quickAddDates([1])}>Tomorrow</Button>
                <Button size="sm" variant="outline" className="hover:border-[#A8E6CF] hover:bg-[#A8E6CF]/20" onClick={() => quickAddDates([3])}>In 3 days</Button>
                <Button size="sm" variant="outline" className="hover:border-[#A8E6CF] hover:bg-[#A8E6CF]/20" onClick={() => quickAddDates([7])}>In 1 week</Button>
                <Button size="sm" variant="outline" className="hover:border-[#A8E6CF] hover:bg-[#A8E6CF]/20" onClick={() => quickAddDates([14])}>In 2 weeks</Button>
                <Button size="sm" variant="outline" className="hover:border-[#A8E6CF] hover:bg-[#A8E6CF]/20" onClick={() => quickAddDates([21, 28])}>1–4 weeks</Button>
              </div>
            </div>

            <div className="rounded-lg border bg-white p-3">
              <div className="mb-2 flex items-center gap-2 text-sm font-medium text-[#2d2d2d]">
                <Calendar className="h-4 w-4" /> Pick dates (next 6 weeks)
              </div>
              <div className="grid grid-cols-7 gap-1">
                {["Sun","Mon","Tue","Wed","Thu","Fri","Sat"].map((d) => (
                  <div key={d} className="text-[11px] text-gray-500 text-center py-1">{d}</div>
                ))}
                {calendarDays.map((d) => {
                  const isSelected = selectedDates.has(d);
                  return (
                    <button
                      key={d}
                      type="button"
                      onClick={() => toggleDate(d)}
                      className={`rounded border p-2 text-xs transition-colors hover:bg-gray-50 ${isSelected ? "bg-[#A8E6CF]/40 border-[#A8E6CF]" : "bg-white"}`}
                    >
                      {new Date(d + "T00:00:00Z").getUTCDate()}
                    </button>
                  );
                })}
              </div>

              {selectedDates.size > 0 && (
                <div className="mt-2 flex flex-wrap gap-2">
                  {Array.from(selectedDates).sort().map((d) => (
                    <span key={d} className="inline-flex items-center gap-1 rounded-md border px-2 py-1 text-xs">
                      {new Date(d + "T00:00:00Z").toLocaleDateString("en-US")}
                      <button onClick={() => toggleDate(d)} aria-label="remove date" className="text-gray-500"><X className="h-3 w-3" /></button>
                    </span>
                  ))}
                  <Button size="sm" variant="outline" onClick={() => setSelectedDates(new Set())}>Clear dates</Button>
                </div>
              )}
            </div>

            <div className="rounded-lg border bg-white p-3 space-y-3">
              <div>
                <div className="mb-1 text-sm font-medium text-[#2d2d2d]">Channel</div>
                <Select value={channel} onValueChange={(v) => setChannel(v as Channel)}>
                  <SelectTrigger className="w-40"><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="email">Email</SelectItem>
                    <SelectItem value="text">Text</SelectItem>
                    <SelectItem value="card">Card</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <label className="flex items-center gap-2 text-sm text-[#2d2d2d]">
                <input type="checkbox" checked={autoDraft} onChange={(e) => setAutoDraft(e.target.checked)} />
                Auto‑generate draft
              </label>
            </div>
          </div>
        </div>

        {error && (
          <div className="rounded border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700">
            {error}
          </div>
        )}

        <DialogFooter>
          <Button variant="outline" onClick={() => setIsOpen(false)}>Cancel</Button>
          <Button className="bg-[#A8E6CF] text-[#2d2d2d] hover:bg-[#98CFBA]" onClick={save}>
            <Plus className="h-4 w-4" /> Create Reminders
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}


